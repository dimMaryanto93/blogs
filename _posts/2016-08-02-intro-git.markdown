---
layout: post
title: "Version control system is important for developers when build an application"
date: 2016-08-02T00:06:45+07:00
author: Dimas Maryanto
comments: yes
page_category: git
language: git
gist:
repository:
categories:
- VCS
- Git
tags:
- VCS
- Git
- Repository
references:
- https://git-scm.com/
- https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control
---

Halo and selamat datang di blog saya kembali, nah kali ini saya bakalan nulis pengalaman dan sekaligus bagimana cara menggunakan Git sebagai Repository project atau yang lebih dikenal dengan Version Control System. Jadi apa aja yang akan saya bahas diantaranya sebagai berikut:

* Apa itu Git, GitHub dan software sejenisnya? apa perbedaanya?
* Kenapa menggunakan Git, klo anda perhatikan semua software memiliki auto save contohnya seperti di Netbeans, atau bakhan Microsoft Office?
* Git dan GitHub sangatlah membantu anda ketika bekerja dengan Team yang lumayan banyak.
* Membuat project Git dengan tujuan untuk merekam semua kegiatan atau aktivitas yang kita lakukan, magsudnya kapan kita melakukan commit untuk mengimpan perubahan terhapap suatu file.
* Mengenal fungsi-fungsi dasar Git seperti ```add```, ```commit```, ```push```, ```branch```, ```checkhout```, ```merge``` dan ```reset```.

<!--more-->

Ok langsung aja gak usah banyak ngomong lagi, jadi Git ini menurut [websitenya](https://git-scm.com/) adalah

> Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.

Jadi kesimpulanya dari pengertian diatas yaitu Git adalah software yang gratis dan opensource yang mengimplementasikan Version Control System, apa yang jadi pertanyaan apa itu Version Control System? ok jadi begini menurut [dokumentasi git](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control) adalah sebagai berikut

> What is "version control", and why should you care? Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.

> If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use. It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.

Jadi dari kedua paragraf tersebut bisa disimpulkan klo **Version control itu bertujuan untuk mencatat perubahan terhadap file atau sekumpulan file dalam waktu yang realtime**. sebagai contoh klo anda adalah seorang web designer anda **bisa melihat setiap perubahan yang terjadi di setiap versi** (every time you commit the files), bisa **mengembalikan ke versi yang anda tentukan** contohnya anda punya file yang telah direcord oleh git kemudian ingin dikembalikan ke hasil save pertamakali itu bisa dilakukan dengan Git, **Membandingkan sebuah design terakhir commit dengan versi yang sebelumnya** dan masih banyak lagi fungsi-fungsi lain. gimana ngertikan magsud saya? ngerti lah ya.

Kemudian pembahasan selanjutnya Apa itu GitHub? apakah sama seperti Git? jawabanya tentu aja beda, trus apa GitHub? jadi GitHub itu menurut [Wikipedia](https://en.wikipedia.org/wiki/GitHub) adalah sebagai berikut

> GitHub is a web-based Git repository hosting service. It offers all of the distributed revision control and source code management (SCM) functionality of Git as well as adding its own features. Unlike Git, which is strictly a command-line tool, GitHub provides a Web-based graphical interface and desktop as well as mobile integration.

Dari kalimat tersebut bisa kita garis bawahi klo GitHub adalah salah satu implementasi dari **Git repository hosting service**, sebenarnya tidak hanya GitHub yang mengimplementasikan Git Repository hosting service ada juga [BitBucket](https://bitbucket.org/), [GitBook](https://www.gitbook.com/), [OpenShift](https://www.openshift.com/),  [Heroku](https://www.heroku.com/) dan lain-lain.

Pertanyaan berikutnya adalah trus apa bedanya Git dan GitHub? jawabanya masih dalam kalimat yang sama seperti diatas, jadi Git adalah command line based yang bekerja dikomputer local sedangkan GitHub adalah web based jadi digunakan untuk share file (centralize atau distributed). for example, disini saya punya folder atau project git di local dengan nama ```javascript-belajar``` dikomputer saya seperti berikut:

![Local VCS](/images/2016-08/intro-git/project-git.png)

dan juga saya punya repository di webnya dengan isi yang sama dengan project ```javascript-belajar``` di BitBucket. ini menandakan klo kita melakukan share ke public (internet) apa yang kita lakukan di komputer lokal seperti berikut:

![Central VCS](/images/2016-08/intro-git/project-bitbucket.png)

Selain itu juga kita bisa me-remote repository tersebut sesuia dengan akses. contohnya kita bisa berkolaborasi untuk menulis koding bareng-bareng (Team Work).

Lanjut ke pertanyaan selanjutnya yaitu apakah Git dan GitHub sangat membantu kita dalam mengerjakan sebuah project yang memiliki team yang cukup besar? jawabanya tentu aja ia, soalnya anda tau Linux? pasti tau khan? nah Linux itu khan opensource yang pasti banyak team didalamnya baik dari hardware support developer, Software Enginering, Language Translator dan lain-lain. Mereka bekerja menggunakan Git dan GitHub, klo anda tidak percaya silahkan cek aja, bahkan pencipta Linux yaitu Linus Torvalds me-share [linux kernelnya melalui GitHub](https://github.com/torvalds/linux)

Nah tadi saya udah ngomong panjang lebar tentang Git dan GitHub sekerang gak lengkap klo misalnya cuman teori aja jadi kita sekarang akan praktek menggunakan **dasar Git** dan konsep dan fungsi yang digunakan Git pada perintah-perintahnya. Tapi sebelum kita praktek anda harus meng-install dulu Git di system anda. Gak usah khawatir installnya gampang kok klo di Windows sama seperti menginstall software biasa, klo di Linux ada beberapa distro yg secara default udah ter-install seperti di Fedora dan OpenSuse. klo di UBuntu kita harus install secara manual.

Sedangkan untuk di Linux caranya gampang kita bisa pake default repository di masing masing distro contohnya klo di UBuntu:

{% highlight bash %}
$ sudo apt-get install git
{% endhighlight %}

Klo di Fedora 23 ke atas bisa pake

{% highlight bash %}
$ sudo dnf install git
{% endhighlight %}

Sedangkan di Fedora 22 kebawah bisa pake

{% highlight bash %}
sudo yum install git
{% endhighlight %}

OK setelah di install silahkan buat folder bebas dimana saya klo saya buatnya di ```C:\Users\softw\temp>``` nama foldernya adalah ```belajar-git``` seperti berikut:

{% highlight bash %}
C:\Users\softw\temp>mkdir belajar-git

C:\Users\softw\temp>dir
 Volume in drive C has no label.
 Volume Serial Number is DEE3-0EB1

 Directory of C:\Users\softw\temp

08/01/2016  10:27 PM    <DIR>          .
08/01/2016  10:27 PM    <DIR>          ..
08/01/2016  10:27 PM    <DIR>          belajar-git
{% endhighlight %}

Kemudian pindahkan pointer ke folder ```belajar-git``` seperti berikut:

{% highlight bash %}
C:\Users\softw\temp>cd belajar-git

C:\Users\softw\temp\belajar-git>
{% endhighlight %}

Nah sekarang kita mulai untuk membuat project Git, yaitu dengan menggunakan perintah seperti berikut:

## Membuat project Git

{% highlight bash %}
git init
{% endhighlight %}

Maka hasilnya seperti berikut:

{% highlight bash %}
C:\Users\softw\temp\belajar-git>git init
Initialized empty Git repository in C:/Users/softw/temp/belajar-git/.git/

C:\Users\softw\temp\belajar-git>
{% endhighlight %}

## Check status

Untuk mengetahui sebuah folder adalah project Git atau bukan dan untuk mengetahui perubahan sebuah file kita bisa gunakan perintah seperti berikut:

{% highlight bash %}
git status
{% endhighlight %}

Kalo folder tersebut adalah project git maka akan outputnya seperti berikut:

{% highlight bash %}
C:\Users\softw\temp\belajar-git>git status
On branch master

Initial commit

nothing to commit (create/copy files and use "git add" to track)

C:\Users\softw\temp\belajar-git>git status
On branch master

Initial commit

nothing to commit (create/copy files and use "git add" to track)

C:\Users\softw\temp\belajar-git>
{% endhighlight %}

atau seperti berikut:

{% highlight bash %}
C:\Users\softw\temp\java-buildtools-mvn>git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working tree clean

C:\Users\softw\temp\java-buildtools-mvn>
{% endhighlight %}

Tetapi jika bukan project Git maka outputnya seperti berikut:

{% highlight bash %}
C:\Users\softw\temp>git status
fatal: Not a git repository (or any of the parent directories): .git

C:\Users\softw\temp>
{% endhighlight %}

## Tracking files

Nah supaya file kita bisa direcord oleh Git kita harus tambahkan files yang ingin di tracking perubahnayan bisa menggunakan perintah seperti berikut:

{% highlight bash %}
git add .
{% endhighlight %}

Jadi tanda ```.``` digunakan untuk men-track semua file yang terdeteksi oleh Git atau klo mau mengembutkan nama filenya langsung contohnya saya punya file dengan nama ```Halo.java``` jadi seperti berikut:

{% highlight bash %}
git add Halo.java
{% endhighlight %}

Nah sekarang saya bakanlan buat file dengan nama ```README.md``` di dalam direktory tersebut:

![New File](/images/2016-08/intro-git/new-file.png)

sekarang anda coba cek statusnya seperti berikut:

{% highlight bash %}
C:\Users\softw\temp\belajar-git>git status
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        README.md

nothing added to commit but untracked files present (use "git add" to track)

C:\Users\softw\temp\belajar-git>
{% endhighlight %}

Dari output diatas terlihat bahwa ada file baru yang belum di track oleh Git. selanjutnya adalah kita tambahkan file tersebut sepaya di track oleh Git dengan perintah berikut:

{% highlight bash %}
git add README.md
{% endhighlight %}

Untuk melihat hasilnya, kembali gunakan perintah status maka hasilnya seperti berikut:

{% highlight bash %}
C:\Users\softw\temp\belajar-git>git add README.md

C:\Users\softw\temp\belajar-git>git status
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   README.md


C:\Users\softw\temp\belajar-git>
{% endhighlight %}

## Simpan secara permanen

Untuk menyimpan file yang telah direcord tadi kita bisa gunakan perintah seperti berikut:

{% highlight bash %}
git commit -m "Pesan atau message aktivitas"
{% endhighlight %}

Sekarang studikasusnya saya mau mengimpan file yang tadi telah saya buat yaitu ```README.md``` meskimpun belum ada isinya, saran saya sih sering-seringlah atau secara berkala melakukan ```commit``` bisa di revert jika terjadi file corrupt atau kerusakan file lainya.

{% highlight bash %}
git commit -m "Membut project git"
{% endhighlight %}

Maka outputnya seperti berikut:

{% highlight bash %}
C:\Users\softw\temp\belajar-git>git commit -m "Membut project git"
[master (root-commit) 885b801] Membut project git
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 README.md

C:\Users\softw\temp\belajar-git>
{% endhighlight %}

## Melihat aktifitas

Untuk melihat aktivitas kita bisa menggunakan perintah seperti berikut:

{% highlight bash %}
git log
{% endhighlight %}

atau untuk mempersingkat bisa menggunakan parameter ```--oneline``` seperti berikut:

{% highlight bash %}
git log --oneline
{% endhighlight %}

Jika di eksekusi kita akan melihat output seperti berikut:

{% highlight bash %}
C:\Users\softw\temp\belajar-git>git log
commit 885b80170b69257284a91dbf07ad83a03f8a8ed5
Author: dimMaryanto@win10 <software.dimmaryanto@hotmail.com>
Date:   Mon Aug 1 23:17:08 2016 +0700

    Membut project git

C:\Users\softw\temp\belajar-git>
{% endhighlight %}

## Reset ke commit sebelumnya

Untuk reset pada dasarnya adalah mengembalikan file ke kondisi tertentu, nah ini lah salah satu keuggulan dari VCS atau kepanjangan Version Control System. ok untuk itu kita buat commit lagi tpi syaratnya filenya harus diubah dulu, sekarang kita ubah filenya dengan menambahkan text seperti berikut:

{% highlight bash %}
Ini adalah text
{% endhighlight %}

seperti berikut:

![Perubahan file](/images/2016-08/intro-git/plain-text.png)

sekarang coba anda lihat statunya kembali maka outputnya seperti berikut:

{% highlight bash %}
C:\Users\softw\temp\belajar-git>git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   README.md

no changes added to commit (use "git add" and/or "git commit -a")

C:\Users\softw\temp\belajar-git>
{% endhighlight %}

Setelah itu kita track kembali dengan perintah seperti berikut:

{% highlight bash %}
git add .
{% endhighlight %}

Kemudian kita simpan secara permanen menggunakan perintah berikut:

{% highlight bash %}
git commit -m "commit ke 2"
{% endhighlight %}

Maka outputnya seperti berikut:

{% highlight bash %}
C:\Users\softw\temp\belajar-git>git add .

C:\Users\softw\temp\belajar-git>git commit -m "commit ke 2"
[master 9e33033] commit ke 2
 1 file changed, 1 insertion(+)

C:\Users\softw\temp\belajar-git>
{% endhighlight %}

Nah sekarang kita lihat lognya:

{% highlight bash %}
git log --oneline
{% endhighlight %}

Berikut outputnya:

{% highlight bash %}
C:\Users\softw\temp\belajar-git>git log --oneline
9e33033 commit ke 2
885b801 Membut project git

C:\Users\softw\temp\belajar-git>
{% endhighlight %}

Kemudian untuk memastikan bahwa filenya memiliki isi coba anda buka kembali filenya:

![Membuka lagi filenya](/images/2016-08/intro-git/plain-text.png)

Masih ada ya isinya yaitu ```Ini adalah text``` setelah itu sama mau kembalikan ke commit pertama yaitu ```Membuat project git``` dengan ref ```885b801``` jadi perintahnya adalah

{% highlight bash %}
C:\Users\softw\temp\belajar-git>git reset --hard 885b801
{% endhighlight %}

Berikut outputnya:

{% highlight bash %}
HEAD is now at 885b801 Membut project git
{% endhighlight %}

Nah sekarang anda buka lagi filenya:

![Buka filenya lagi setelah reset](/images/2016-08/intro-git/blank-text.png)

Nah filenya udah kembali ke versi sebelum commit ke dua lebih tepatnya dikemabalikan ke commit pertama. Ok munggin sekian dulu pembahasan tentang pengenalan Git, untuk perintah ```push```, ```merge```, ```pull``` dan masih banyak lagi nanti saya akan lanjutkan di postingan selanjutnya tentang Git. see you next post!.
